{"version":3,"sources":["js/reducers/index.js","js/store/index.js","js/constants/action-types.js","js/components/CardFront.js","js/components/List.js","js/actions/index.js","js/components/CardList.js","js/components/Deck.js","js/components/DiscardPile.js","js/components/PlayArea.js","js/components/HealthTracker.js","js/components/PlayActions.js","js/components/StartingHealth.js","js/components/CurrentHealth.js","js/components/MainSection.js","js/components/PageTabs.js","js/components/AppButtons.js","js/components/App.js","js/index.js"],"names":["initialState","articles","cards","name","id","screen","inDiscard","inDeck","startHP","gravehold","nemesis","currentHP","shuffleArray","array","i","length","j","Math","floor","random","_ref","store","rootReducer","hp","state","arguments","undefined","action","type","slice","Object","objectSpread","assign","toConsumableArray","concat","payload","idToRemove","filter","card","value","storedState","window","localStorage","getItem","createStore","JSON","parse","subscribe","getState","setItem","stringify","CardFront","onClick","onMouseEnter","onMouseLeave","react_default","a","createElement","className","class","List","connect","dispatch","removeCard","event","target","map","components_CardFront","key","ConnectedForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","title","selectedOption","bind","assertThisInitialized","setState","cardId","index","findIndex","uuidv1","props","addCard","_this2","Component","CardList","article","Deck","revealCard","shuffleCards","width","style","divStyle","left","zIndex","DiscardPile","returnCard","onHover","classList","add","onLeave","remove","PlayArea","components_Deck","components_DiscardPile","HealthTracker","setHP","getHealthClass","onChange","startHP1","startHP2","setStartingHP","data","components_HealthTracker","CurrentHealth","currentHP1","currentHP2","setCurrentHP","MainScreen","components_CurrentHealth","components_PlayArea","StartingHealth","components_List","components_CardList","PageTabs","endSetup","label","onSubmit","preventDefault","console","log","switchTab","getClass","App","components_PageTabs","MainSection","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.da5ca658.chunk.js","sourcesContent":["import { \n    ADD_CARD, REMOVE_CARD, SHUFFLE_CARDS, END_SETUP, REVEAL_CARD, RETURN_CARD, SET_STARTINGHP, SET_CURRENTHP\n} from \"../constants/action-types\";\n\nconst initialState = {\n    articles: [],\n    cards: [\n        {name: \"Nemesis\", id: \"default1\"},\n        {name: \"Nemesis\", id: \"default2\"},\n    ],\n    screen: \"SETUP\",\n    inDiscard: [],\n    inDeck: [],\n    startHP: {gravehold: 30, nemesis: 70},\n    currentHP: {gravehold: 30, nemesis: 70},\n};\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nconst rootReducer = (state = initialState, action) => {\n    let cards, hp;\n\n    switch (action.type) {\n        case END_SETUP:\n            if (state.screen === \"SETUP\") {\n                const cards = state.cards.slice();\n                shuffleArray(cards);\n                return {\n                    ...state, \n                    screen: \"PLAY\", \n                    inDeck: cards, \n                    inDiscard: [],\n                    currentHP: Object.assign({}, state.startHP),\n                };\n            }\n            return {...state, screen: \"SETUP\"};\n        case ADD_CARD:\n            return {...state, cards: [...state.cards, action.payload] };\n        case REMOVE_CARD:\n            const idToRemove = action.payload.id;\n            cards = state.cards.filter(card => {\n                return card.id !== idToRemove;\n            })\n            return {...state, cards: cards};\n        case SHUFFLE_CARDS:\n            cards = state.cards.slice();\n            shuffleArray(cards);\n            return { ...state, inDeck: cards, inDiscard: [] };\n        case REVEAL_CARD:\n            return {\n                ...state,\n                inDeck: state.inDeck.slice(1),\n                inDiscard: [state.inDeck[0], ...state.inDiscard]\n            }\n        case RETURN_CARD:\n            return {\n                ...state,\n                inDiscard: state.inDiscard.slice(1),\n                inDeck: [state.inDiscard[0], ...state.inDeck]\n            }\n        case SET_STARTINGHP:\n            hp = Object.assign(state.startHP);\n            hp[action.payload.type] = action.payload.value;\n            return {...state, startHP: hp};\n        case SET_CURRENTHP:\n            hp = Object.assign(state.currentHP);\n            hp[action.payload.type] = action.payload.value;\n            return {...state, currentHP: hp};\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst storedState = window.localStorage ? localStorage.getItem(\"state\") : null;\nlet store;\nif (storedState) {\n    store = createStore(rootReducer, JSON.parse(storedState));\n} else {\n    store = createStore(rootReducer);\n}\n\nif (window.localStorage) {\n    store.subscribe(() => {\n        const state = store.getState();\n        localStorage.setItem(\"state\", JSON.stringify(state));\n    });\n}\n\nexport default store;","export const END_SETUP = \"END_SETUP\";\nexport const ADD_CARD = \"ADD_CARD\";\nexport const REMOVE_CARD = \"REMOVE_CARD\";\nexport const SHUFFLE_CARDS = \"SHUFFLE_CARDS\";\nexport const REVEAL_CARD = \"REVEAL_CARD\";\nexport const RETURN_CARD = \"RETURN_CARD\";\nexport const SET_STARTINGHP = \"SET_STARTINGHP\";\nexport const SET_CURRENTHP = \"SET_CURRENTHP\";","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nconst CardFront = ({ card, onClick, onMouseEnter, onMouseLeave }) => {\n    \n    function getClassName () {\n        return \"cardFront \" + card.class;\n    }\n\n    return (\n    <div className={getClassName()} id={card.id} \n        onClick={onClick} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}\n    >\n        {card.name}\n    </div>\n    );\n}\n\nexport default CardFront;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CardFront from \"./CardFront\";\nimport { removeCard } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { cards: state.cards };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        removeCard: (payload) => dispatch(removeCard(payload)),\n    };\n};\n\nconst UI = ({ cards, removeCard }) => {\n    const onClick = (event) => {\n        removeCard({id: event.target.id});\n    }\n\n    return (\n    <div className=\"discardHolder\">\n        {cards.map((card) => (\n            <CardFront key={card.id} card={card} onClick={onClick} />\n        ))}\n    </div>\n    )\n}\n\nconst List = connect(mapStateToProps, mapDispatchToProps)(UI);\n\nexport default List;","import { \n    ADD_CARD, REMOVE_CARD, SHUFFLE_CARDS, END_SETUP, REVEAL_CARD, RETURN_CARD, SET_STARTINGHP, SET_CURRENTHP\n} from \"../constants/action-types\";\n\nexport const setStartingHP = hp => ({\n    type: SET_STARTINGHP,\n    payload: {\n        type: hp.type,\n        value: hp.value\n    }\n});\n\nexport const setCurrentHP = hp => ({\n    type: SET_CURRENTHP,\n    payload: {\n        type: hp.type,\n        value: hp.value\n    }\n});\n\nexport const addCard = card => ({ \n    type: ADD_CARD, payload: {\n        id: card.id,\n        name: card.name,\n        class: card.class\n    }\n});\n\nexport const removeCard = card => ({ \n    type: REMOVE_CARD, payload: {\n        id: card.id\n    }\n});\n\nexport const endSetup = () => ({\n    type: END_SETUP, payload: {}\n});\n\nexport const shuffleCards = () => ({\n    type: SHUFFLE_CARDS, payload: {}\n});\n\nexport const revealCard = () => ({\n    type: REVEAL_CARD, payload: {}\n});\n\nexport const returnCard = () => ({\n    type: RETURN_CARD, payload: {}\n});\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport uuidv1 from \"uuid\";\nimport { addCard } from \"../actions/index\";\nimport CardFront from \"./CardFront\";\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addCard: article => dispatch(addCard(article))\n    };\n};\n\nclass ConnectedForm extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            title: \"\",\n            selectedOption: \"\",\n        };\n\n        this.onClick = this.onClick.bind(this);\n\n        this.cards = [\n            {id: \"nemesis\", class: \"nemesis\", name: \"Nemesis\"},\n            {id: \"one\", class: \"one\", name: \"Player One\"},\n            {id: \"two\", class: \"two\", name: \"Player Two\"},\n            {id: \"three\", class: \"three\", name: \"Player Three\"},\n            {id: \"four\", class: \"four\", name: \"Player Four\"},\n            {id: \"onetwo\", class: \"onetwo\", name: \"Player One/Two\"},\n            {id: \"threefour\", class: \"threefour\", name: \"Player Three/Four\"},\n            {id: \"wild\", class: \"wild\", name: \"Wild\"}\n        ];\n    }\n\n    handleOptionChange(event) {\n        this.setState({ selectedOption: event.target.value });\n    }\n\n    onClick (event) {\n        const cardId = event.target.id;\n        const index = this.cards.findIndex(card => {\n            return (card.id === cardId);\n        });\n        if (index >= 0) {\n            const card = this.cards[index];\n            const id = uuidv1();\n            this.props.addCard({ name: card.name, id, class: card.class });\n        }\n    }\n\n    render() {\n        //const that=this;\n        const GetButtons = (props) => {\n            const name = props.card;\n            return(\n                <div className=\"radio\">\n                    <label>\n                        <input\n                            type=\"radio\"\n                            value={name}\n                            checked={this.state.selectedOption === name}\n                            onChange={this.handleOptionChange}\n                        />\n                        {name}\n                    </label>\n                </div>\n            )\n        };\n\n        return(\n            <div className=\"discardHolder\">\n                {this.cards.map((card) => (\n                    <CardFront key={card.id} card={card} onClick={this.onClick} />\n                ))}\n            </div>\n        );\n    }\n}\n\nconst CardList = connect(null, mapDispatchToProps)(ConnectedForm);\n\nexport default CardList;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { revealCard, shuffleCards } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { cards: state.inDeck };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        revealCard: () => dispatch(revealCard()),\n        shuffleCards: () => dispatch(shuffleCards()),\n    };\n};\n\nconst UI = ({ cards, revealCard, shuffleCards }) => {\n    const getCard = (card, index) => {\n        const onClick = () => {\n            revealCard();\n        }\n    \n        const divStyle = {\n            left: index*5,\n            zIndex: index\n        };\n        return (\n            <div className=\"cardBack\" onClick={onClick} style={divStyle}/>\n        );\n    }\n\n    function doShuffle () {\n        shuffleCards();\n    }\n\n    function getWidth () {\n        const width = (110 + (cards.length * 8));\n        return { width: width + 'px' };\n    }\n\n    const width = (110 + (cards.length * 5));\n\n    // setTimeout(() => {\n    //     const cardBacks = document.getElementsByClassName(\"cardBack\");\n    //     Array.from(cardBacks).forEach((cardBack, index) => {\n    //         cardBack.style.left = (index*5) + \"px\";\n    //     });\n    // }, 500);\n\n    if (cards.length === 0) {\n        return (\n            <div className=\"deckHolder\" style={{width: width}}>\n                <div className=\"shuffleHolder\" onClick={doShuffle}>Shuffle</div>\n            </div>\n        )    \n    }\n\n    return (\n    <div className=\"deckHolder\" style={{width: width}}>\n        {cards.map(getCard)}\n    </div>\n    )\n}\n\n\nconst Deck = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default Deck;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { returnCard } from \"../actions/index\";\nimport CardFront from \"./CardFront\";\n\nconst mapStateToProps = state => {\n    return { cards: state.inDiscard };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        returnCard: () => dispatch(returnCard()),\n    };\n};\n\nconst UI = ({ cards, returnCard }) => {\n    const onClick = () => {\n        returnCard();\n    }\n\n    function onHover (event) {\n        event.target.classList.add(\"hovering\");\n    }\n\n    function onLeave (event) {\n        event.target.classList.remove(\"hovering\");\n    }\n\n    function getCard (card, index) {\n        if (index === 0) {\n            return (\n                <CardFront key={card.id} card={card} \n                    onClick={onClick} onMouseEnter={onHover} onMouseLeave={onLeave}\n                />\n            );\n        }\n        return <CardFront key={card.id} card={card}/>;\n    }\n\n    return (\n    <div className=\"discardHolder\">\n        {cards.map(getCard)}\n    </div>\n    )\n}\n\n\nconst DiscardPile = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default DiscardPile;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Deck from \"./Deck\";\nimport DiscardPile from \"./DiscardPile\";\n\nconst PlayArea = () => {\n    return (\n    <div className=\"cardsArea\">\n        <Deck />\n        <DiscardPile />\n    </div>\n    )\n}\n\nexport default PlayArea;","import React from \"react\";\n\nconst getHealthClass = (startHP, hp) => {\n    if (hp >= startHP) {\n        return \"healthNumber goodHealth\";\n    }\n    if (hp < startHP/2) {\n        return \"healthNumber badHealth\";\n    }\n    return \"healthNumber okHealth\";\n}\n\nconst HealthTracker = ({ name, startHP, hp, setHP }) => {\n    function getClassName () {\n        return \"healthTracker \" + name;\n    }\n\n    function onChangeHP (event) {\n        setHP(event.target.value);\n    }\n\n    function increaseHP () {\n        setHP(hp + 1);\n    }\n\n    function decreaseHP () {\n        setHP(hp - 1);\n    }\n\n    return (\n    <div className={getClassName()}>\n        <div className=\"healthButton\" onClick={decreaseHP}>-</div>\n        <input className={getHealthClass(startHP, hp)} type=\"text\" value={hp} onChange={onChangeHP}/>\n        <div className=\"healthButton\" onClick={increaseHP}>+</div>\n    </div>\n    )\n}\n\nexport default HealthTracker;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { shuffleCards } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { cards: state.inDiscard };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        shuffleCards: () => dispatch(shuffleCards()),\n    };\n};\n\nconst UI = ({ cards, shuffleCards }) => {\n    const onClick = () => {\n        shuffleCards();\n    }\n\n    return (\n    <button onClick={onClick}>Shuffle All</button>\n    )\n}\n\n\nconst PlayActions = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default PlayActions;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { setStartingHP } from \"../actions/index\";\nimport HealthTracker from \"./HealthTracker\";\n\nconst mapStateToProps = state => {\n    return { \n        startHP1: state.startHP.gravehold,\n        startHP2: state.startHP.nemesis,  \n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setStartingHP: (data) => dispatch(setStartingHP(data)),\n    };\n};\n\nconst UI = ({ startHP1, startHP2, setStartingHP }) => {\n    const onChange1 = (hp) => {\n        setStartingHP({\n            type: \"gravehold\",\n            value: hp\n        });\n    }\n\n    const onChange2 = (hp) => {\n        setStartingHP({\n            type: \"nemesis\",\n            value: hp\n        });\n    }\n\n    return (\n    <div className=\"healthArea\">\n        <HealthTracker name=\"gravehold\" startHP={startHP1} hp={startHP1} setHP={onChange1} />\n        <HealthTracker name=\"nemesis\" startHP={startHP2} hp={startHP2} setHP={onChange2} />\n    </div>\n    )\n}\n\nconst Deck = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default Deck;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { setCurrentHP } from \"../actions/index\";\nimport HealthTracker from \"./HealthTracker\";\n\nconst mapStateToProps = state => {\n    return { \n        currentHP1: state.currentHP.gravehold,\n        currentHP2: state.currentHP.nemesis,\n        startHP1: state.startHP.gravehold,\n        startHP2: state.startHP.nemesis,  \n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentHP: (data) => dispatch(setCurrentHP(data)),\n    };\n};\n\nconst UI = ({ currentHP1, currentHP2, startHP1, startHP2, setCurrentHP }) => {\n    const setHP1 = (hp) => {\n        setCurrentHP({\n            type: \"gravehold\",\n            value: hp\n        });\n    }\n\n    const setHP2 = (hp) => {\n        setCurrentHP({\n            type: \"nemesis\",\n            value: hp\n        });\n    }\n\n    return (\n    <div className=\"healthArea\">\n        <HealthTracker name=\"gravehold\" startHP={startHP1} hp={currentHP1} setHP={setHP1} />\n        <HealthTracker name=\"nemesis\" startHP={startHP2} hp={currentHP2} setHP={setHP2} />\n    </div>\n    )\n}\n\n\nconst CurrentHealth = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default CurrentHealth;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport List from \"./List\";\nimport CardList from \"./CardList\";\nimport Deck from \"./Deck\";\nimport PlayArea from \"./PlayArea\";\nimport PlayActions from \"./PlayActions\";\nimport StartingHealth from \"./StartingHealth\";\nimport CurrentHealth from \"./CurrentHealth\";\n\nconst mapStateToProps = state => {\n    return { screen: state.screen };\n};\n\nconst Screen = ({ screen }) => {\n    if (screen === \"PLAY\") {\n        return(\n            <div>\n                <div className=\"col-md-4 offset-md-1\">\n                    <h2>Health</h2>\n                    <CurrentHealth />\n\n                    <h2>Cards</h2>\n                    <PlayArea />\n                </div>\n            </div>\n        );\n    }\n\n    return(\n    <div>\n        <div className=\"setupArea\">\n            <h2>Starting Health</h2>\n            <StartingHealth />\n\n            <h2>Cards in Deck</h2>\n            <List />\n\n            <h2>Add a new card</h2>\n            <CardList />\n        </div>\n    </div>\n    )\n}\n\nconst MainScreen = connect(mapStateToProps)(Screen);\nexport default MainScreen;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { endSetup } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { screen: state.screen };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        switchTab: () => dispatch(endSetup()),\n    };\n};\n\nconst UI = ({ screen, switchTab }) => {\n    const onClick = (event) => {\n        if (event.target.id !== screen) {\n            switchTab();\n        }\n    }\n\n    function getClass (name) {\n        if (name === screen) {\n            return \"activeTab\";\n        }\n        return \"inactiveTab\";\n    }\n\n    return (\n    <div className=\"pageTabsArea\">\n        <div id=\"SETUP\" className={getClass(\"SETUP\")} onClick={onClick}>SETUP</div>\n        <div id=\"PLAY\" className={getClass(\"PLAY\")}  onClick={onClick}>PLAY GAME</div>\n    </div>\n    )\n}\n\n\nconst PageTabs = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default PageTabs;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { endSetup } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { screen: state.screen };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        endSetup: () => dispatch(endSetup()),\n    };\n};\n\n\n\nconst ButtonDiv = ({ screen, endSetup }) => {\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"switch screen\");\n        endSetup();\n    };\n\n    const label = (screen === \"SETUP\") ? \"Start Game\" : \"Return to Setup\";\n\n    return(\n    <div>\n        <form onSubmit={handleSubmit}>\n            <button type=\"submit\">{label}</button>\n        </form>\n    </div>\n    )\n};\n\nconst AppButtons = connect(mapStateToProps, mapDispatchToProps)(ButtonDiv);\n\nexport default AppButtons;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport MainScreen from \"./MainSection\";\nimport AppButtons from \"./AppButtons\";\nimport PageTabs from \"./PageTabs\";\n\nconst App = () => (\n    <div className=\"row mt-5\">\n        <PageTabs />\n\n        <MainScreen />\n    </div>\n)\n\nexport default App;","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\nimport App from \"./components/App\";\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"app\")\n);"],"sourceRoot":""}