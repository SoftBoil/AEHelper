{"version":3,"sources":["js/reducers/index.js","js/store/index.js","js/constants/action-types.js","js/components/CardFront.js","js/components/List.js","js/actions/index.js","js/components/CardList.js","js/components/Deck.js","js/components/DiscardPile.js","js/components/PlayArea.js","js/components/PlayActions.js","js/components/HealthTracker.js","js/components/StartingHealth.js","js/components/CurrentHealth.js","js/components/MainSection.js","js/components/AppButtons.js","js/components/App.js","js/index.js"],"names":["initialState","articles","cards","name","id","screen","inDiscard","inDeck","startHP","gravehold","nemesis","currentHP","shuffleArray","array","i","length","j","Math","floor","random","_ref","store","rootReducer","hp","state","arguments","undefined","action","type","slice","Object","objectSpread","assign","toConsumableArray","concat","payload","idToRemove","filter","card","value","storedState","window","localStorage","getItem","createStore","JSON","parse","subscribe","getState","setItem","stringify","CardFront","onClick","react_default","a","createElement","className","List","connect","dispatch","removeCard","event","target","map","components_CardFront","key","ConnectedForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","title","selectedOption","bind","assertThisInitialized","setState","cardName","uuidv1","props","addCard","_this2","Component","CardList","article","Deck","revealCard","index","divStyle","left","zIndex","style","DiscardPile","returnCard","PlayArea","components_Deck","components_DiscardPile","PlayActions","shuffleCards","HealthTracker","setHP","getHealthClass","onChange","startHP1","startHP2","setStartingHP","data","components_HealthTracker","CurrentHealth","currentHP1","currentHP2","setCurrentHP","MainScreen","components_CurrentHealth","components_PlayArea","components_PlayActions","StartingHealth","components_List","components_CardList","AppButtons","endSetup","label","onSubmit","preventDefault","console","log","App","MainSection","components_AppButtons","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.80cad29c.chunk.js","sourcesContent":["import { \n    ADD_CARD, REMOVE_CARD, SHUFFLE_CARDS, END_SETUP, REVEAL_CARD, RETURN_CARD, SET_STARTINGHP, SET_CURRENTHP\n} from \"../constants/action-types\";\n\nconst initialState = {\n    articles: [],\n    cards: [\n        {name: \"Nemesis\", id: \"default1\"},\n        {name: \"Nemesis\", id: \"default2\"},\n    ],\n    screen: \"SETUP\",\n    inDiscard: [],\n    inDeck: [],\n    startHP: {gravehold: 30, nemesis: 70},\n    currentHP: {gravehold: 30, nemesis: 70},\n};\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}\n\nconst rootReducer = (state = initialState, action) => {\n    let cards, hp;\n\n    switch (action.type) {\n        case END_SETUP:\n            if (state.screen === \"SETUP\") {\n                const cards = state.cards.slice();\n                shuffleArray(cards);\n                return {\n                    ...state, \n                    screen: \"PLAY\", \n                    inDeck: cards, \n                    inDiscard: [],\n                    currentHP: Object.assign({}, state.startHP),\n                };\n            }\n            return {...state, screen: \"SETUP\"};\n        case ADD_CARD:\n            return {...state, cards: [...state.cards, action.payload] };\n        case REMOVE_CARD:\n            const idToRemove = action.payload.id;\n            cards = state.cards.filter(card => {\n                return card.id !== idToRemove;\n            })\n            return {...state, cards: cards};\n        case SHUFFLE_CARDS:\n            cards = state.cards.slice();\n            shuffleArray(cards);\n            return { ...state, inDeck: cards, inDiscard: [] };\n        case REVEAL_CARD:\n            return {\n                ...state,\n                inDeck: state.inDeck.slice(1),\n                inDiscard: [state.inDeck[0], ...state.inDiscard]\n            }\n        case RETURN_CARD:\n            return {\n                ...state,\n                inDiscard: state.inDiscard.slice(1),\n                inDeck: [state.inDiscard[0], ...state.inDeck]\n            }\n        case SET_STARTINGHP:\n            hp = Object.assign(state.startHP);\n            hp[action.payload.type] = action.payload.value;\n            return {...state, startHP: hp};\n        case SET_CURRENTHP:\n            hp = Object.assign(state.currentHP);\n            hp[action.payload.type] = action.payload.value;\n            return {...state, currentHP: hp};\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"../reducers/index\";\n\nconst storedState = window.localStorage ? localStorage.getItem(\"state\") : null;\nlet store;\nif (storedState) {\n    store = createStore(rootReducer, JSON.parse(storedState));\n} else {\n    store = createStore(rootReducer);\n}\n\nif (window.localStorage) {\n    store.subscribe(() => {\n        const state = store.getState();\n        localStorage.setItem(\"state\", JSON.stringify(state));\n    });\n}\n\nexport default store;","export const END_SETUP = \"END_SETUP\";\nexport const ADD_CARD = \"ADD_CARD\";\nexport const REMOVE_CARD = \"REMOVE_CARD\";\nexport const SHUFFLE_CARDS = \"SHUFFLE_CARDS\";\nexport const REVEAL_CARD = \"REVEAL_CARD\";\nexport const RETURN_CARD = \"RETURN_CARD\";\nexport const SET_STARTINGHP = \"SET_STARTINGHP\";\nexport const SET_CURRENTHP = \"SET_CURRENTHP\";","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nconst CardFront = ({ card, onClick }) => (\n\n    <div className=\"cardFront\" id={card.id} onClick={onClick}>\n        {card.name}\n    </div>\n)\n\nexport default CardFront;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CardFront from \"./CardFront\";\nimport { removeCard } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { cards: state.cards };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        removeCard: (payload) => dispatch(removeCard(payload)),\n    };\n};\n\nconst UI = ({ cards, removeCard }) => {\n    const onClick = (event) => {\n        removeCard({id: event.target.id});\n    }\n\n    return (\n    <div className=\"discardHolder\">\n        {cards.map((card) => (\n            <CardFront key={card.id} card={card} onClick={onClick} />\n        ))}\n    </div>\n    )\n}\n\nconst List = connect(mapStateToProps, mapDispatchToProps)(UI);\n\nexport default List;","import { \n    ADD_CARD, REMOVE_CARD, SHUFFLE_CARDS, END_SETUP, REVEAL_CARD, RETURN_CARD, SET_STARTINGHP, SET_CURRENTHP\n} from \"../constants/action-types\";\n\nexport const setStartingHP = hp => ({\n    type: SET_STARTINGHP,\n    payload: {\n        type: hp.type,\n        value: hp.value\n    }\n});\n\nexport const setCurrentHP = hp => ({\n    type: SET_CURRENTHP,\n    payload: {\n        type: hp.type,\n        value: hp.value\n    }\n});\n\nexport const addCard = card => ({ \n    type: ADD_CARD, payload: {\n        id: card.id,\n        name: card.name\n    }\n});\n\nexport const removeCard = card => ({ \n    type: REMOVE_CARD, payload: {\n        id: card.id\n    }\n});\n\nexport const endSetup = () => ({\n    type: END_SETUP, payload: {}\n});\n\nexport const shuffleCards = () => ({\n    type: SHUFFLE_CARDS, payload: {}\n});\n\nexport const revealCard = () => ({\n    type: REVEAL_CARD, payload: {}\n});\n\nexport const returnCard = () => ({\n    type: RETURN_CARD, payload: {}\n});\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport uuidv1 from \"uuid\";\nimport { addCard } from \"../actions/index\";\nimport CardFront from \"./CardFront\";\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addCard: article => dispatch(addCard(article))\n    };\n};\n\nclass ConnectedForm extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            title: \"\",\n            selectedOption: \"\",\n        };\n\n        this.onClick = this.onClick.bind(this);\n    }\n\n    handleOptionChange(event) {\n        this.setState({ selectedOption: event.target.value });\n    }\n\n    onClick (event) {\n        const cardName = event.target.id;\n        const id = uuidv1();\n        this.props.addCard({ name: cardName, id });\n    }\n\n    render() {\n        //const that=this;\n        const GetButtons = (props) => {\n            const name = props.card;\n            return(\n                <div className=\"radio\">\n                    <label>\n                        <input\n                            type=\"radio\"\n                            value={name}\n                            checked={this.state.selectedOption === name}\n                            onChange={this.handleOptionChange}\n                        />\n                        {name}\n                    </label>\n                </div>\n            )\n        };\n\n        const cards = [\n            {id: \"Nemesis\", name: \"Nemesis\"},\n            {id: \"Player One\", name: \"Player One\"},\n            {id: \"Player Two\", name: \"Player Two\"},\n            {id: \"Player Three\", name: \"Player Three\"},\n            {id: \"Player Four\", name: \"Player Four\"},\n            {id: \"Player One/Two\", name: \"Player One/Two\"},\n            {id: \"Player Three/Four\", name: \"Player Three/Four\"},\n            {id: \"Wild\", name: \"Wild\"}\n        ];\n\n        return(\n            <div className=\"discardHolder\">\n                {cards.map((card) => (\n                    <CardFront key={card.id} card={card} onClick={this.onClick} />\n                ))}\n            </div>\n        );\n    }\n}\n\nconst CardList = connect(null, mapDispatchToProps)(ConnectedForm);\n\nexport default CardList;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { revealCard } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { cards: state.inDeck };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        revealCard: () => dispatch(revealCard()),\n    };\n};\n\n\n\nconst UI = ({ cards, revealCard }) => {\n    const getCard = (card, index) => {\n        const onClick = () => {\n            revealCard();\n        }\n    \n        const divStyle = {\n            left: index*5,\n            zIndex: index\n        };\n        return (\n            <div className=\"cardBack\" onClick={onClick} style={divStyle}/>\n        );\n    }\n\n    // setTimeout(() => {\n    //     const cardBacks = document.getElementsByClassName(\"cardBack\");\n    //     Array.from(cardBacks).forEach((cardBack, index) => {\n    //         cardBack.style.left = (index*5) + \"px\";\n    //     });\n    // }, 500);\n\n    return (\n    <div className=\"deckHolder\">\n        {cards.map(getCard)}\n    </div>\n    )\n}\n\n\nconst Deck = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default Deck;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { returnCard } from \"../actions/index\";\nimport CardFront from \"./CardFront\";\n\nconst mapStateToProps = state => {\n    return { cards: state.inDiscard };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        returnCard: () => dispatch(returnCard()),\n    };\n};\n\nconst UI = ({ cards, returnCard }) => {\n    const onClick = () => {\n        returnCard();\n    }\n\n    return (\n    <div className=\"discardHolder\">\n        {cards.map((card) => (\n            <CardFront key={card.id} card={card} onClick={onClick} />\n        ))}\n    </div>\n    )\n}\n\n\nconst DiscardPile = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default DiscardPile;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Deck from \"./Deck\";\nimport DiscardPile from \"./DiscardPile\";\n\nconst PlayArea = () => {\n    return (\n    <div className=\"cardsArea\">\n        <Deck />\n        <DiscardPile />\n    </div>\n    )\n}\n\nexport default PlayArea;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { shuffleCards } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { cards: state.inDiscard };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        shuffleCards: () => dispatch(shuffleCards()),\n    };\n};\n\nconst UI = ({ cards, shuffleCards }) => {\n    const onClick = () => {\n        shuffleCards();\n    }\n\n    return (\n    <button onClick={onClick}>Shuffle All</button>\n    )\n}\n\n\nconst PlayActions = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default PlayActions;","import React from \"react\";\n\nconst getHealthClass = (startHP, hp) => {\n    if (hp >= startHP) {\n        return \"healthNumber goodHealth\";\n    }\n    if (hp < startHP/2) {\n        return \"healthNumber badHealth\";\n    }\n    return \"healthNumber okHealth\";\n}\n\nconst HealthTracker = ({ name, startHP, hp, setHP }) => {\n    function getClassName () {\n        return \"healthTracker \" + name;\n    }\n\n    function onChangeHP (event) {\n        setHP(event.target.value);\n    }\n\n    function increaseHP () {\n        setHP(hp + 1);\n    }\n\n    function decreaseHP () {\n        setHP(hp - 1);\n    }\n\n    return (\n    <div className={getClassName()}>\n        <div className=\"healthButton\" onClick={decreaseHP}>-</div>\n        <input className={getHealthClass(startHP, hp)} type=\"text\" value={hp} onChange={onChangeHP}/>\n        <div className=\"healthButton\" onClick={increaseHP}>+</div>\n    </div>\n    )\n}\n\nexport default HealthTracker;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { setStartingHP } from \"../actions/index\";\nimport HealthTracker from \"./HealthTracker\";\n\nconst mapStateToProps = state => {\n    return { \n        startHP1: state.startHP.gravehold,\n        startHP2: state.startHP.nemesis,  \n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setStartingHP: (data) => dispatch(setStartingHP(data)),\n    };\n};\n\nconst UI = ({ startHP1, startHP2, setStartingHP }) => {\n    const onChange1 = (hp) => {\n        setStartingHP({\n            type: \"gravehold\",\n            value: hp\n        });\n    }\n\n    const onChange2 = (hp) => {\n        setStartingHP({\n            type: \"nemesis\",\n            value: hp\n        });\n    }\n\n    return (\n    <div className=\"healthArea\">\n        <HealthTracker name=\"gravehold\" startHP={startHP1} hp={startHP1} setHP={onChange1} />\n        <HealthTracker name=\"nemesis\" startHP={startHP2} hp={startHP2} setHP={onChange2} />\n    </div>\n    )\n}\n\nconst Deck = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default Deck;","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { setCurrentHP } from \"../actions/index\";\nimport HealthTracker from \"./HealthTracker\";\n\nconst mapStateToProps = state => {\n    return { \n        currentHP1: state.currentHP.gravehold,\n        currentHP2: state.currentHP.nemesis,\n        startHP1: state.startHP.gravehold,\n        startHP2: state.startHP.nemesis,  \n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        setCurrentHP: (data) => dispatch(setCurrentHP(data)),\n    };\n};\n\nconst UI = ({ currentHP1, currentHP2, startHP1, startHP2, setCurrentHP }) => {\n    const setHP1 = (hp) => {\n        setCurrentHP({\n            type: \"gravehold\",\n            value: hp\n        });\n    }\n\n    const setHP2 = (hp) => {\n        setCurrentHP({\n            type: \"nemesis\",\n            value: hp\n        });\n    }\n\n    return (\n    <div className=\"healthArea\">\n        <div>\n            Gravehold: <HealthTracker name=\"gravehold\" startHP={startHP1} hp={currentHP1} setHP={setHP1} />\n        </div>\n\n        <div>\n            Nemesis: <HealthTracker name=\"nemesis\" startHP={startHP2} hp={currentHP2} setHP={setHP2} />\n        </div>\n    </div>\n    )\n}\n\n\nconst CurrentHealth = connect(mapStateToProps, mapDispatchToProps)(UI);\nexport default CurrentHealth;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport List from \"./List\";\nimport CardList from \"./CardList\";\nimport Deck from \"./Deck\";\nimport PlayArea from \"./PlayArea\";\nimport PlayActions from \"./PlayActions\";\nimport StartingHealth from \"./StartingHealth\";\nimport CurrentHealth from \"./CurrentHealth\";\n\nconst mapStateToProps = state => {\n    return { screen: state.screen };\n};\n\nconst Screen = ({ screen }) => {\n    if (screen === \"PLAY\") {\n        return(\n            <div>\n                <h1>PLAYING</h1>\n\n                <div className=\"col-md-4 offset-md-1\">\n                    <h2>Health</h2>\n                    <CurrentHealth />\n\n                    <h2>Cards</h2>\n                    <PlayArea />\n                    <PlayActions />\n                </div>\n            </div>\n        );\n    }\n\n    return(\n    <div>\n        <h1>SETUP</h1>\n\n        <div className=\"setupArea\">\n            <h2>Starting Health</h2>\n            <StartingHealth />\n\n            <h2>Cards in Deck</h2>\n            <List />\n\n            <h2>Add a new card</h2>\n            <CardList />\n        </div>\n    </div>\n    )\n}\n\nconst MainScreen = connect(mapStateToProps)(Screen);\nexport default MainScreen;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { endSetup } from \"../actions/index\";\n\nconst mapStateToProps = state => {\n    return { screen: state.screen };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        endSetup: () => dispatch(endSetup()),\n    };\n};\n\n\n\nconst ButtonDiv = ({ screen, endSetup }) => {\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"switch screen\");\n        endSetup();\n    };\n\n    const label = (screen === \"SETUP\") ? \"Start Game\" : \"Return to Setup\";\n\n    return(\n    <div>\n        <form onSubmit={handleSubmit}>\n            <button type=\"submit\">{label}</button>\n        </form>\n    </div>\n    )\n};\n\nconst AppButtons = connect(mapStateToProps, mapDispatchToProps)(ButtonDiv);\n\nexport default AppButtons;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport MainScreen from \"./MainSection\";\nimport AppButtons from \"./AppButtons\";\n\nconst App = () => (\n    <div className=\"row mt-5\">\n        <MainScreen />\n\n        <p/>\n        <AppButtons />\n    </div>\n)\n\nexport default App;","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\nimport App from \"./components/App\";\n\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"app\")\n);"],"sourceRoot":""}